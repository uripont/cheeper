package com.webdev.cheeper.util;

import com.mysql.cj.jdbc.MysqlConnectionPoolDataSource;
import java.sql.*;

public class DBManager implements AutoCloseable {
    private static MysqlConnectionPoolDataSource dataSource;
    private Connection connection;

    // Initialize the datasource with pooling configuration
    private static synchronized MysqlConnectionPoolDataSource getDataSource() throws SQLException {
        if (dataSource == null) {
            try {
                dataSource = new MysqlConnectionPoolDataSource();
                
                // Required configuration
                String host = System.getenv("DB_HOST");
                if (host == null || host.isEmpty()) {
                    throw new IllegalStateException("DB_HOST environment variable not set");
                }
                
                String user = System.getenv("DB_SERVER_USER");
                if (user == null || user.isEmpty()) {
                    throw new IllegalStateException("DB_SERVER_USER environment variable not set");
                }
                
                String password = System.getenv("DB_SERVER_PASS");
                if (password == null || password.isEmpty()) {
                    throw new IllegalStateException("DB_SERVER_PASS environment variable not set");
                }
                
                String database = System.getenv("MYSQL_DATABASE");
                if (database == null || database.isEmpty()) {
                    throw new IllegalStateException("MYSQL_DATABASE environment variable not set");
                }
                
                dataSource.setServerName(host);
                dataSource.setUser(user);
                dataSource.setPassword(password);
                dataSource.setDatabaseName(database);
                
                // Connection configuration
                dataSource.setUseServerPrepStmts(true);       // Use server-side prepared statements
                dataSource.setAutoReconnect(true);            // Reconnect if connection is lost
                dataSource.setCachePrepStmts(true);          // Enable prepared statement caching
                dataSource.setPrepStmtCacheSize(250);        // Statement cache size
                dataSource.setPrepStmtCacheSqlLimit(2048);   // Maximum length of cached SQL string
            } catch (SQLException e) {
                throw new SQLException("Failed to configure database connection pool", e);
            }
        }
        return dataSource;
    }

    public DBManager() throws SQLException {
        this.connection = getDataSource().getConnection();
    }

    public PreparedStatement prepareStatement(String query) throws SQLException {
        return connection.prepareStatement(query);
    }

    public PreparedStatement prepareStatement(String query, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(query, autoGeneratedKeys);
    }

    public void beginTransaction() throws SQLException {
        connection.setAutoCommit(false);
    }

    public void commit() throws SQLException {
        connection.commit();
        connection.setAutoCommit(true);
    }

    public void rollback() throws SQLException {
        connection.rollback();
        connection.setAutoCommit(true);
    }

    @Override
    public void close() throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
        }
    }
}
